// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserCustomers {
  id                 Int      @id @default(autoincrement())         
  user_name          String   @unique     
  email              String   @unique      
  password           String?
  telephone          String?
  image              String?
  referral_code      String?       
  email_verification Boolean  @default(false)      
  createdAt          DateTime @default(now())    
  updatedAt          DateTime @updatedAt 
  coupons            Coupons[]
  event              Event[]
  referral_point     ReferralPoint[]
  transaction        Transaction[]
  review             Review[]
}

model UserOrganizer {
  id                 Int      @id @default(autoincrement())   
  user_name          String   @unique       
  email              String   @unique       
  password           String?
  telephone          String?
  image              String?
  email_verification Boolean  @default(false)
  createdAt          DateTime @default(now())    
  updatedAt          DateTime @updatedAt 
  coupons            Coupons[]
  event              Event[]    
}


model Event {
  id               Int        @id @default(autoincrement()) 
  UserCustomers_id Int
  UserOrganizer_id Int
  title            String
  price            Decimal    @default(0)  
  end_time         DateTime
  location         String 
  description      String     @db.Text
  seats            Int
  is_free          Boolean?
  is_online        Boolean?
  image            String
  created_at       DateTime  @default(now())   
  updated_at       DateTime  @updatedAt
  Category         Category
  coupons          Coupons[]
  userOrganizer    UserOrganizer @relation(fields: [UserOrganizer_id], references: [id])
  userCustomers    UserCustomers @relation(fields: [UserCustomers_id], references: [id])

}

model Coupons {
  id                 Int          @id @default(autoincrement())       
  UserCustomers_id   Int
  UserOrganizer_id   Int
  event_id           Int
  name               String
  discount_amount    Decimal
  is_used            Boolean     
  usage_limit        Int
  created_at         DateTime     
  expiration_date    DateTime
  userCustomers      UserCustomers @relation(fields: [UserCustomers_id], references: [id])     
  event              Event @relation(fields: [event_id], references: [id])   
  userOrganizer      UserOrganizer @relation(fields: [UserOrganizer_id], references: [id])    
}

model ReferralPoint {
  id              Int       @id @default(autoincrement())  
  referrer_id     Int    
  points          Int      
  claim_points    Boolean 
  created_at      DateTime  
  expiration_date DateTime
  referrer        UserCustomers @relation (fields: [referrer_id], references: [id])  
}

model Transaction {
  id              Int    @id @default(autoincrement()) 
  UserCustomers_id         Int
  event_id        Int
  coupon_event_id Int
  coupon_referral Int
  points_used     Int   
  totalamount     Int    
  created_at DateTime 
  userCustomer    UserCustomers @relation(fields: [UserCustomers_id], references: [id])
}

enum StatusTransaction {
  waitingForPayment
  success
  cancel
}

model Review {
  id         Int     @id @default(autoincrement()) 
  UserCustomers_id    Int
  event_id   Int
  rating     Int
  feedback   String
  created_at DateTime
  userCustomers UserCustomers @relation(fields: [UserCustomers_id], references: [id])
}




enum Category {
  Music
  seminar
  Sports
  Technology
  Arts
  Food
  Health
  Business
  Science
  Travel
  Family
  Hobbies
  Charity
  Community
  Film
  Fashion
  Holiday
  Lifestyle
  Other
}